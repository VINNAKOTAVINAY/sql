CREATE TABLE HALLS
(
   HNAME          VARCHAR2 (4) PRIMARY KEY,
   HTYPE          VARCHAR2 (10),
   RENT           NUMBER (5),
   NOOFBOOKINGS   NUMBER (2)
);
/

CREATE TABLE COMPANY
(
   CCODE         NUMBER (3) PRIMARY KEY,
   COMPANYNAME   VARCHAR2 (10),
   CONTACTNO     NUMBER (10)
);
/

CREATE TABLE BOOKING
(
   TRANSID     NUMBER (2) PRIMARY KEY,
   CCODE       NUMBER (3),
   HNAME       VARCHAR2 (4),
   STARTDATE   DATE,
   ENDDATE     DATE,
   CONSTRAINT FK_CCODE FOREIGN KEY (CCODE) REFERENCES COMPANY (CCODE),
   CONSTRAINT FK_HNAME FOREIGN KEY (HNAME) REFERENCES HALLS (HNAME)
);
/

-- 1. CREATE A SEQUENCE TO GENERATE TRANSACTION ID.

CREATE SEQUENCE SEQ_TRANSACTIONID MINVALUE 1
                                  MAXVALUE 999999999999999999999999999
                                  START WITH 1
                                  INCREMENT BY 1
                                  CACHE 20;
/

-- 2. CREATE A PACKAGE NAMED CONFERENCE_AUTOMATION

CREATE OR REPLACE PACKAGE CONFERENCE_AUTOMATION
IS
   -- 2.a PROCEDURE TO INSERT ONE RECORD IN ‘BOOKING’ TABLE
   PROCEDURE P_INS_BOOKING (P_CCODE        NUMBER,
                            P_HNAME        VARCHAR,
                            P_STARTDATE    DATE,
                            P_ENDDATE      DATE);

   -- 2.b PROCEDURE TO RETRIEVE THE TOTAL NUMBER OF BOOKINGS
   PROCEDURE P_TOTAL_BOOKINGS (P_HTYPE VARCHAR2);

   -- 2.c PROCEDURE TO GENERATE THE REPORT
   PROCEDURE P_DISPLAY_RECORDS (P_CCODE NUMBER);

   -- 2.d PROCEDURE TO GET THE RENT FROM “HALLS” TABLE AND CALCULATE THE COST
   PROCEDURE P_RENT_CALC (P_DAYS NUMBER, P_HNAME VARCHAR2);

   -- 2.e.i PRIVATE FUNCTION TO VALIDATE COMPANY CODE
   FUNCTION F_VALIDATE_CCODE (P_CCODE NUMBER)
      RETURN VARCHAR2;

   -- 2.e.ii PRIVATE FUNCTION TO VALIDATE HALL CAPACITY
   FUNCTION F_VALIDATE_HTYPE (P_HTYPE VARCHAR2)
      RETURN VARCHAR2;
END CONFERENCE_AUTOMATION;
/

-- 2. CREATE A PACKAGE NAMED CONFERENCE_AUTOMATION STARTS HERE

CREATE OR REPLACE PACKAGE BODY CONFERENCE_AUTOMATION
IS
   -- 2.a PROCEDURE TO INSERT ONE RECORD IN ‘BOOKING’ TABLE  STARTS HERE
   PROCEDURE P_INS_BOOKING (P_CCODE        NUMBER,
                            P_HNAME        VARCHAR,
                            P_STARTDATE    DATE,
                            P_ENDDATE      DATE)
   IS
      V_SQL           VARCHAR2 (4000);
      V_COUNT_CCODE   NUMBER;
      V_COUNT_HNAME   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO V_COUNT_CCODE
        FROM COMPANY
       WHERE CCODE = P_CCODE;

      IF V_COUNT_CCODE <> 0
      THEN
         SELECT COUNT (*)
           INTO V_COUNT_HNAME
           FROM HALLS
          WHERE HNAME = P_HNAME;

         IF V_COUNT_HNAME <> 0
         THEN
            INSERT INTO BOOKING (TRANSID,
                                 CCODE,
                                 HNAME,
                                 STARTDATE,
                                 ENDDATE)
                 VALUES (SEQ_TRANSACTIONID.NEXTVAL,
                         P_CCODE,
                         P_HNAME,
                         P_STARTDATE,
                         P_ENDDATE);
         ELSE
            DBMS_OUTPUT.PUT_LINE ('HNAME IS NOT EXIST');
         END IF;
      ELSE
         DBMS_OUTPUT.PUT_LINE ('CCODE IS NOT EXIST');
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         DBMS_OUTPUT.PUT_LINE ('NO DATA FOUND. TRY AGAIN');
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.PUT_LINE ('ERROR OCCURED IS: ' || SQLERRM);
   END P_INS_BOOKING;

   -- 2.a PROCEDURE TO INSERT ONE RECORD IN ‘BOOKING’ TABLE  ENDS HERE

   -- 2.b PROCEDURE TO RETRIEVE THE TOTAL NUMBER OF BOOKINGS STARTS HERE
   PROCEDURE P_TOTAL_BOOKINGS (P_HTYPE VARCHAR2)
   IS
      V_TOTAL_BOOKINGS   NUMBER;
   BEGIN
      SELECT NOOFBOOKINGS
        INTO V_TOTAL_BOOKINGS
        FROM HALLS
       WHERE HTYPE = P_HTYPE;

      DBMS_OUTPUT.PUT_LINE ('TOTAL NO OF BOOKINGS ARE: ' || V_TOTAL_BOOKINGS);
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         DBMS_OUTPUT.PUT_LINE ('NO DATA FOUND. TRY AGAIN');
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.PUT_LINE ('ERROR OCCURED IS: ' || SQLERRM);
   END P_TOTAL_BOOKINGS;

   -- 2.b PROCEDURE TO RETRIEVE THE TOTAL NUMBER OF BOOKINGS ENDS HERE

   -- 2.c PROCEDURE TO GENERATE THE REPORT STARTS HERE
   PROCEDURE P_DISPLAY_RECORDS (P_CCODE NUMBER)
   IS
      V_COUNT_CCODE   NUMBER;
      V_TRANSID       NUMBER;
      V_HNAME         VARCHAR2 (100);
      V_STARTDATE     DATE;
      V_ENDDATE       DATE;
   BEGIN
      SELECT COUNT (CCODE) INTO V_COUNT_CCODE FROM COMPANY;

      IF V_COUNT_CCODE <> 0
      THEN
         SELECT TRANSID,
                HNAME,
                STARTDATE,
                ENDDATE
           INTO V_TRANSID,
                V_HNAME,
                V_STARTDATE,
                V_ENDDATE
           FROM BOOKING
          WHERE CCODE = P_CCODE;

         DBMS_OUTPUT.PUT_LINE ('THE VALUES ARE');
         DBMS_OUTPUT.PUT_LINE ('TRANSACTION ID IS: ' || V_TRANSID);
         DBMS_OUTPUT.PUT_LINE ('HALL NAME IS: ' || V_TRANSID);
         DBMS_OUTPUT.PUT_LINE ('START DATE IS: ' || V_STARTDATE);
         DBMS_OUTPUT.PUT_LINE ('END DATE IS: ' || V_ENDDATE);
      ELSE
         DBMS_OUTPUT.PUT_LINE ('PLEASE ENETER VALID COMPANY CODE');
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         DBMS_OUTPUT.PUT_LINE ('NO DATA FOUND. TRY AGAIN');
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.PUT_LINE ('ERROR OCCURED IS: ' || SQLERRM);
   END P_DISPLAY_RECORDS;

   -- 2.c PROCEDURE TO GENERATE THE REPORT ENDS HERE

   -- 2.d PROCEDURE TO GET THE RENT FROM “HALLS” TABLE AND CALCULATE THE COST STARTS HERE
   PROCEDURE P_RENT_CALC (P_DAYS NUMBER, P_HNAME VARCHAR2)
   IS
      V_COST          NUMBER;
      V_COUNT_HNAME   NUMBER;
      V_RENT          NUMBER;
   BEGIN
      SELECT COUNT (*) INTO V_COUNT_HNAME FROM HALLS;

      IF V_COUNT_HNAME <> 0
      THEN
         SELECT RENT
           INTO V_RENT
           FROM HALLS
          WHERE HNAME = P_HNAME;

         V_COST := P_DAYS * V_RENT;
         DBMS_OUTPUT.PUT_LINE ('THE COST OF HALL IS: ' || V_COST);
      ELSE
         DBMS_OUTPUT.PUT_LINE ('PLEASE ENTER VALID HALL NAME');
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         DBMS_OUTPUT.PUT_LINE ('NO DATA FOUND. TRY AGAIN');
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.PUT_LINE ('ERROR OCCURED IS: ' || SQLERRM);
   END P_RENT_CALC;

   -- 2.d PROCEDURE TO GET THE RENT FROM “HALLS” TABLE AND CALCULATE THE COST ENDS HERE

   -- 2.e.i PRIVATE FUNCTION TO VALIDATE COMPANY CODE STARTS HERE
   FUNCTION F_VALIDATE_CCODE (P_CCODE NUMBER)
      RETURN VARCHAR2
   IS
      V_LENGTH_CCODE   NUMBER;
   BEGIN
      SELECT LENGTH (P_CCODE) INTO V_LENGTH_CCODE FROM DUAL;

      IF V_LENGTH_CCODE = 3
      THEN
         IF P_CCODE BETWEEN 100 AND 999
         THEN
            RETURN 'ENTERED RIGHT DATA';
         ELSE
            RETURN 'CCODE SHOULD BE BTW 100 AND 999';
         END IF;
      ELSE
         RETURN 'CCODE SHOULD BE 3 DIGITS ONLY';
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 'CCODE SHOULD BE ONLY NUMBER';
   END F_VALIDATE_CCODE;

   -- 2.e.i PRIVATE FUNCTION TO VALIDATE COMPANY CODE ENDS HERE

   -- 2.e.ii PRIVATE FUNCTION TO VALIDATE HALL CAPACITY STARTS HERE
   FUNCTION F_VALIDATE_HTYPE (P_HTYPE VARCHAR2)
      RETURN VARCHAR2
   IS
   BEGIN
      IF P_HTYPE IN ('SMALL', 'MEDIUM', 'LARGE')
      THEN
         RETURN 'VALID ENTERED DATA';
      ELSE
         RETURN 'ENTER VALID DATA';
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 'ENTER VALID DATA';
   END F_VALIDATE_HTYPE;
-- 2.e.ii PRIVATE FUNCTION TO VALIDATE HALL CAPACITY STARTS HERE
END;
/

-- 2. CREATE A PACKAGE NAMED CONFERENCE_AUTOMATION ENDS HERE

-- 3. CREATE TRIGGER TRIG_UPDATE.

CREATE TRIGGER TRIG_UPDATE
   AFTER INSERT
   ON BOOKING
   FOR EACH ROW
BEGIN
   UPDATE HALLS
      SET NOOFBOOKINGS = NOOFBOOKINGS + 1
    WHERE HNAME = :NEW.HNAME;
END;
/
